<UserControl xmlns:vue="clr-namespace:Prototype1Table.Vue"  xmlns:my="clr-namespace:Microsoft.Surface.Presentation.Controls;assembly=Microsoft.Surface.Presentation"  x:Class="Prototype1Table.Vue.Consultation"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4"
             mc:Ignorable="d" 
             xmlns:vueModele="clr-namespace:Prototype1Table.VueModele"
             xmlns:table="clr-namespace:Prototype1Table"
             table:SurfaceFingerFilter.Filter="True"
             Name="Conteneur"
             Loaded="Fenetre_Loaded">

    <UserControl.Resources>
        <MatrixTransform x:Key="InitialMatrixTransform">
            <MatrixTransform.Matrix>
                <Matrix OffsetX="0" OffsetY="0"/>
            </MatrixTransform.Matrix>
        </MatrixTransform>

        <!-- Style pour le ScatterViewItem contenant la carte -->
        <Style x:Key="ScatterViewItemStyleCarte" TargetType="{x:Type my:ScatterViewItem}">
            <!-- Pour que le scatterviewitem se resize en fonction de la taille de son contenu -->
            <Setter Property="Width" Value="{Binding Path=Content.Width, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
            <Setter Property="Height" Value="{Binding Path=Content.Height, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type my:ScatterViewItem}">
                        <ContentPresenter />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style pour capturer la taille réelle de l'image de la carte de niveau 1 via SizeObserver -->
        <Style x:Key="ImageSizeStyleCarte" TargetType="{x:Type Image}">
            <!-- Properties nécessaires à la récupération de ActualWidth et ActualHeight -->
            <Setter Property="table:SizeObserver.Observe" Value="true"/>
            <Setter Property="table:SizeObserver.ObservedWidth" Value="{Binding ActualWidthMap, Mode=OneWayToSource}"/>
            <Setter Property="table:SizeObserver.ObservedHeight" Value="{Binding ActualHeightMap, Mode=OneWayToSource}"/>
        </Style>

        <!-- Style pour les ScatterViewItem contenant les médias -->
        <Style x:Key="ScatterViewItemStyleMedias" TargetType="{x:Type my:ScatterViewItem}">
            <Setter Property="Center" Value="{Binding position, Mode=TwoWay}"/>
            <Setter Property="Orientation" Value="{Binding orientation, Mode=TwoWay}"/>
            <Setter Property="MinWidth" Value="200"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type my:ScatterViewItem}">
                        <ContentPresenter />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid Name="environnement">

        <!--carte-->
        <my:ScatterView Name="carte" Opacity="0"
                            Width="{Binding ElementName=environnement, Path=Width}" Height="{Binding ElementName=environnement, Path=Height}" 
                            IsManipulationEnabled="True">

            
            <my:ScatterViewItem Name="item"
                                Style="{StaticResource ScatterViewItemStyleCarte}"
                                MinWidth="200" MinHeight="200" Orientation="0">

                <!-- On utilise une grid car un scatterviewitem ne doit contenir qu'un sous-élément-->
                <Grid Name ="gridCarte" Width="{Binding WidthGridMap, Mode=TwoWay}" Height="{Binding HeightGridMap, Mode=TwoWay}">

                    <!-- Affichage et manipulation de la carte elle même selon les différents niveaux -->
                    <Image x:Name="fond3" Source="{Binding Carte3}" Visibility="{Binding VisibiliteCarte3}"/>
                    <Image x:Name="fond2" Source="{Binding Carte2}"  Visibility="{Binding VisibiliteCarte2}"/>
                    <Image x:Name="fond1" Source="{Binding Carte1}" Style="{StaticResource ImageSizeStyleCarte}" Visibility="{Binding VisibiliteCarte1}"/>

                    <!-- Affichage et positionnement des POI -->
                    <ItemsControl ItemsSource="{Binding ListePois}">
                        <ItemsControl.ItemContainerStyle>
                            <Style>
                                <Setter Property="FrameworkElement.DataContext" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                                <Setter Property="Canvas.Top" Value="{Binding Y, Mode=OneWay}"/>
                                <Setter Property="Canvas.Left" Value="{Binding X, Mode=OneWay}"/>                              
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                    <Canvas />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Canvas>
                                    <Canvas.Resources>
                                        <DataTemplate DataType="{x:Type vueModele:CouronneVM}">
                                            <vue:Couronne Margin="{Binding MargeCouronne, Mode=OneWay}"/>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type vueModele:PoiConsultationVM}">
                                            <vue:Poi Margin="{Binding MargePoi, Mode=OneWay}"/>
                                        </DataTemplate>
                                    </Canvas.Resources>
                                    <ContentControl Content="{Binding VueCourante}" />
                                </Canvas>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </my:ScatterViewItem>            
        </my:ScatterView>

        <!--Medias-->
        <my:ScatterView Name="ScatterMedias" 
                        ItemContainerStyle="{StaticResource ScatterViewItemStyleMedias}"
                        Width="{Binding ElementName=environnement, Path=Width}" Height="{Binding ElementName=environnement, Path=Height}"
                        ItemsSource="{Binding mediasOuverts}">
            <my:ScatterView.ItemTemplate>

                <DataTemplate>
                    <Grid>
                        <Viewbox Name="grid" VerticalAlignment="Top" HorizontalAlignment="Right">
                            <Grid>
                                <Grid.Resources>
                                    <!--Images-->
                                    <DataTemplate DataType="{x:Type vueModele:ImageVM}">
                                        <MediaElement Source="{Binding cheminMedia}" />
                                    </DataTemplate>
                                    
                                    <!--Videos-->
                                    <DataTemplate DataType="{x:Type vueModele:VideoVM}">
                                        <vue:Video/>
                                    </DataTemplate>
                                    
                                    <!--Diaporamas-->
                                    <DataTemplate DataType="{x:Type vueModele:DiaporamaVM}">
                                        <vue:Diaporama/>    
                                    </DataTemplate>
                                </Grid.Resources>

                                <Canvas Name="ChargementConteneur" Width="400" Height="250" Grid.ZIndex="1" Grid.Column="0" Grid.Row="1">
                                    <Grid Name="ChargementCercle" Margin="200,125,0,0" >
                                        <Path  StrokeThickness="10" StrokeLineJoin="Round" Fill="{x:Null}"
                                            Data="M -50,0 A 33,33 45 0 1 50,0" UseLayoutRounding="False" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat">
                                            <Path.Stroke>
                                                <LinearGradientBrush>
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0.25" Color="#00009BAD" />
                                                        <GradientStop Offset="0.9" Color="#FF009BAD" />
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Path.Stroke>
                                        </Path>
                                        <Path Stroke="#FF009BAD" StrokeThickness="10" StrokeLineJoin="Round" Fill="{x:Null}" 
                                              Data="M -50,0 A 33,33 45 0 0 50,0" UseLayoutRounding="False" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                                        </Path>
                                        <Grid.RenderTransform>
                                            <RotateTransform/>
                                        </Grid.RenderTransform>
                                        <Grid.Triggers>
                                            <EventTrigger RoutedEvent="Loaded">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)" To="-360" Duration="0:0:1" RepeatBehavior="Forever"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </Grid.Triggers>
                                    </Grid>
                                </Canvas>
                                
                                <ContentPresenter Name="test" Content="{Binding}" Grid.ZIndex="2" />
                              
                            </Grid>
                        </Viewbox>
                            <Button Grid.ZIndex="3" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,-10,-10,0"  Height="50" Width="50" Foreground="{x:Null}" BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                            <Button.Template>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Grid>
                                        <Rectangle Fill="#009BAD"/>
                                        <Path Stroke="#FFFFFFFF" StrokeThickness="4.0" StrokeLineJoin="Round" Fill="{x:Null}"
                                                        Data="M 10,10 L 40,40" UseLayoutRounding="False" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" />
                                        <Path Stroke="#FFFFFFFF" StrokeThickness="4.0" StrokeLineJoin="Round" Fill="{x:Null}"
                                                        Data="M 40,10 L 10,40" UseLayoutRounding="False" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" />
                                    </Grid>
                                </ControlTemplate>
                            </Button.Template>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding ElementName=Conteneur, Path=DataContext.FermetureMedia}" CommandParameter="{Binding}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>

                        <Button Grid.ZIndex="3" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,-10,50,0" Height="50" Width="50" Foreground="{x:Null}" BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=environnement, Path=DataContext.PresenceTablette}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <Button.Template>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Grid>
                                        <Image Source="/Prototype1Table;component/Resources/TabletteCarre.png"/>
                                    </Grid>
                                </ControlTemplate>
                            </Button.Template>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding EnvoiTablettes}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>

                        <Button Grid.ZIndex="3" VerticalAlignment="Top" HorizontalAlignment="Right" Height="50" Width="50" Foreground="{x:Null}" BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                    <Setter Property="Margin" Value="0,-10,110,0"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=environnement, Path=DataContext.PresenceTablette}" Value="False"/>
                                                <Condition Binding="{Binding ElementName=environnement, Path=DataContext.PresenceTbi}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Margin" Value="0,-10,50,0"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=environnement, Path=DataContext.PresenceTbi}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <Button.Template>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Grid>
                                        <Image Source="/Prototype1Table;component/Resources/TbiCarre.png"/>
                                    </Grid>
                                </ControlTemplate>
                            </Button.Template>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding EnvoiTbi}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                    </Grid>
                </DataTemplate>
            </my:ScatterView.ItemTemplate>
        </my:ScatterView>

        <!-- Canvas contenant les boutons situés à droite -->
        <Canvas VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2,5,0,0" Width="200" Height="50">
            <!-- Bouton pour revenir au menu de départ-->
            <my:SurfaceButton Name="home" Canvas.Top="-50" Canvas.Right="-60">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ElementName=environnement, Path=DataContext.RetourMenuCommande}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate>
                        <Image Width="40" Height="40" Source="/Prototype1Table;component/Resources/home.png"/>
                    </ControlTemplate>
                </Button.Template>
            </my:SurfaceButton>

            <!-- Bouton pour revenir à l'état initial-->
            <my:SurfaceButton Name="reload" Canvas.Top="0" Canvas.Right="-60">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ElementName=environnement, Path=DataContext.RetourInitialCommande}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate>
                        <Image Width="40" Height="40" Source="/Prototype1Table;component/Resources/reload.png"/>
                    </ControlTemplate>
                </Button.Template>
            </my:SurfaceButton>

            <!-- Bouton d'aide-->
            <my:SurfaceButton Name="help" Canvas.Top="50" Canvas.Right="-60">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ElementName=environnement, Path=DataContext.DemandeAideDroite}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate>
                        <Image Width="40" Height="40" Source="/Prototype1Table;component/Resources/help.png"/>
                    </ControlTemplate>
                </Button.Template>
            </my:SurfaceButton>
        </Canvas>

        <!-- Canvas contenant les boutons situés à gauche -->
        <Canvas VerticalAlignment="Center" HorizontalAlignment="Left" Margin="2,5,0,0" Width="200" Height="50">
            <!-- Bouton pour revenir au menu de départ-->
            <my:SurfaceButton Name="homeB" Canvas.Top="50" Canvas.Left="-60">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ElementName=environnement, Path=DataContext.RetourMenuCommande}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate>
                        <Image Width="40" Height="40" Source="/Prototype1Table;component/Resources/home.png">
                            <Image.RenderTransform>
                                <RotateTransform CenterX="20" CenterY="20" Angle="180"/>
                            </Image.RenderTransform>
                        </Image>
                    </ControlTemplate>
                </Button.Template>
            </my:SurfaceButton>

            <!-- Bouton pour revenir à l'état initial-->
            <my:SurfaceButton Name="reloadB" Canvas.Top="0" Canvas.Left="-60">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ElementName=environnement, Path=DataContext.RetourInitialCommande}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate>
                        <Image Width="40" Height="40" Source="/Prototype1Table;component/Resources/reload.png">
                            <Image.RenderTransform>
                                <RotateTransform CenterX="20" CenterY="20" Angle="180"/>
                            </Image.RenderTransform>
                        </Image>
                    </ControlTemplate>
                </Button.Template>
            </my:SurfaceButton>

            <!-- Bouton d'aide-->
            <my:SurfaceButton Name="helpB" Canvas.Top="-50" Canvas.Left="-60">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ElementName=environnement, Path=DataContext.DemandeAideGauche}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate>
                        <Image Width="40" Height="40" Source="/Prototype1Table;component/Resources/help.png">
                            <Image.RenderTransform>
                                <RotateTransform CenterX="20" CenterY="20" Angle="180"/>
                            </Image.RenderTransform>
                        </Image>
                    </ControlTemplate>
                </Button.Template>
            </my:SurfaceButton>
        </Canvas>


        <!-- Canvas contenant l'image servant d'indicateur de niveau en haut (dans le sens inverse) -->
        <Canvas VerticalAlignment="Top" HorizontalAlignment="center" Margin="0,0,0,0" Width="80" Height="22">
            <Image Name="LevelIndicatorTop" Canvas.Top="-30" Source="{Binding AffichageNiveau}" Height="22" Width="80">
                <Image.RenderTransform>
                    <RotateTransform CenterX="40" CenterY="11" Angle="180"/>
                </Image.RenderTransform>
            </Image>
        </Canvas>

        <!-- Canvas contenant l'image servant d'indicateur de niveau en bas (dans le bon sens) -->
        <Canvas VerticalAlignment="Bottom" HorizontalAlignment="center" Margin="0,0,0,0" Width="80" Height="22">
            <Image Name="LevelIndicatorBottom" Canvas.Bottom="-30" Source="{Binding AffichageNiveau}" Height="22" Width="80"/>
        </Canvas>

    </Grid>

    <!-- Animations des boutons lors de l'ouverture de la vitrine -->
    <UserControl.Triggers>
        <EventTrigger RoutedEvent="Loaded">
            <BeginStoryboard>
                <Storyboard>
                    <DoubleAnimation 
                        Storyboard.TargetName="home" Storyboard.TargetProperty="(Canvas.Right)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-60" To="40" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="reload" Storyboard.TargetProperty="(Canvas.Right)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-60" To="40" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="help" Storyboard.TargetProperty="(Canvas.Right)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-60" To="40" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="homeB" Storyboard.TargetProperty="(Canvas.Left)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-60" To="40" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="reloadB" Storyboard.TargetProperty="(Canvas.Left)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-60" To="40" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="helpB" Storyboard.TargetProperty="(Canvas.Left)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-60" To="40" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="LevelIndicatorTop" Storyboard.TargetProperty="(Canvas.Top)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-30" To="0" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                    <DoubleAnimation 
                        Storyboard.TargetName="LevelIndicatorBottom" Storyboard.TargetProperty="(Canvas.Bottom)"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:1" From="-30" To="0" Duration="0:0:0.8"  FillBehavior="HoldEnd" />
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
        <EventTrigger RoutedEvent="Image.Loaded" SourceName="fond1">
            <BeginStoryboard>
                <Storyboard>
                    <DoubleAnimation 
                        Storyboard.TargetName="carte" Storyboard.TargetProperty="Opacity"
                        DecelerationRatio="0.6"
                        BeginTime="0:0:0" From="0" To="1" Duration="0:0:1"  FillBehavior="HoldEnd" />
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </UserControl.Triggers>
</UserControl>
